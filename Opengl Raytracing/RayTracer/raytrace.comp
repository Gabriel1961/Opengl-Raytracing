#version 440
#define T_MIN 0.01
#define T_MAX 100
#define SKY_BLUE vec3(.5,.7,1.)
#define WHITE vec3(1.,1.,1.)
#define MAGENTA vec3(1.,0.,1.)
#define RED vec3(1.,0.,0.)
#define GREEN vec3(0.,1.,0.)
#define BLUE vec3(0.,0.,1.)
#define GRAY vec3(.7,.7,.7)
#define DARK_GRAY vec3(.3,.3,.3)
#define GRASS_GREEN vec3(0.66, 0.76, 0)
#define YELLOW vec3(1.,1.,0)
#define LIGHT_BLUE vec3(0.12, 0.22, 0.6)
#define ORANGE vec3(1f, 0.66f, 0.3f)
#define BLACK vec3(0,0,0)
const float INF = 1. / 0.;
#define MSAA_SAMPLES 10
#define MAX_RSTEP 20
#define PI 3.14159

uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}



// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }



// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}



// Pseudo-random value in half-open range [0:1].
float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float rand(inout float state){ 
	float val = floatConstruct(hash(floatBitsToUint(state)));
	state = val;
	return val;
}


vec3 randInUnitSph(vec3 p){
	float state = random(p);
	return vec3(rand(state),rand(state),rand(state))*2 - 1;
}

vec2 randInUnitCircle(vec2 p){
	float state = random(p);
	return vec2(rand(state),rand(state))*2-1;
}
vec2 randInUnitCircle(float rstate){
	return vec2(rand(rstate),rand(rstate))*2-1;
}

//vec3 randInUnitSph(vec3 p) {
//	float rstate = random(p);
//	float u = rand(rstate);
//	float v = rand(rstate);
//	float w = rand(rstate);
//	
//	float x = 2 * sqrt(u) * cos(2 * PI * v);
//	float y = 2 * sqrt(u) * sin(2 * PI * v);
//	float z = 1 - 2 * u;
//	
//	return vec3(x,y,z);
//}

float schlick(float cosine,float refrIdx){
	float r0 = (1-refrIdx)/(1+refrIdx);
	r0 = r0*r0;
	return r0 + (1-r0)*pow(1-cosine,5);
}

bool refract(vec3 I,vec3 N,float eta,out vec3 R){
	float k = 1.0 - eta * eta * (1.0 - dot(N, I) * dot(N, I));
    if (k < 0.0)
		return false;
    else{
		R = eta * I - (eta * dot(N, I) + sqrt(k)) * N;
        return true;
	}
}


layout(local_size_x = 1, local_size_y = 1,local_size_z = 1) in;

layout(rgba32f,binding=0) uniform writeonly image2D imgOut;


struct Camera {
	vec3 pos; // position of the camera in world space
	vec3 dir; // direction the camera is pointing
	mat3 rot;
	float fov; // field of view of the camera
	float aperature; // size of the camera aperature
	float focusDist; // distance to the point of focus
};

uniform Camera cam;

struct Ray{
	vec3 o;
	vec3 d;
	vec3 at(float t){
		return o + t*d;
	}
};

struct Hit{
	float t;
	vec3 p;	 // hit point
	vec3 n;  // normal
};

struct Light{
	vec3 albedo;
	vec3 pos;
	vec3 dir;
};

struct Sphere{
	float r;
	vec3 c;
	int matIdx;
};

vec3 debugColor = vec3(0,0,0);
struct Material{
	vec3 albedo;
	float roughness; // [0,1]
	float refIdx; // -1 for no refraction
	bool scatter(Ray r,Hit h, out vec3 attenuation, out Ray scattered){
		float rstate = random(h.p);
		attenuation = albedo;
		// refraction
		if(refIdx!=-1){
			float eta; // refraction index correponding to the ray
			vec3 outn; // outward normal
			float cosine;
			float reflectProb;
			if(dot(r.d,h.n)>0){
				outn = -h.n;
				eta = refIdx;
				cosine = refIdx * dot(h.n,r.d) / length(r.d);
			}
			else{
				outn = h.n;
				eta = 1./refIdx;
				cosine = -dot(h.n,r.d) / length(r.d);
			}
			vec3 refr;
			if(refract(r.d,outn,eta,refr)){
				reflectProb = schlick(cosine,refIdx);
			}
			else {
				reflectProb = 1.0;
			}
			
			if(rand(rstate)<reflectProb)
				scattered = Ray(h.p,reflect(r.d,h.n));
			else
				scattered = Ray(h.p,refr);
			//debugColor = MAGENTA*reflectProb;
			return true;
		}
		if(random(h.p) > roughness){ // scatter
			scattered = Ray(h.p,h.n + randInUnitSph(h.p));
			return true;
		}
		else{ // reflect
			scattered = Ray(h.p,reflect(r.d,h.n) + randInUnitSph(h.p)*(1-roughness));
			return dot(scattered.d, h.n)>0;
		}
	}
};





bool hitObj(Sphere s,Ray r,out Hit hit){
	vec3 co = r.o - s.c;
	float a = dot(r.d,r.d);
	float b = dot(co,r.d);
	float c = dot(co,co) - s.r*s.r;
	float dis = b*b - a*c;
	if(dis > 0){
		float t = (-b-sqrt(dis))/a;
		if(t<T_MAX && t>T_MIN)
		{
			hit.t = t;
			hit.p = r.at(t);
			hit.n = normalize(hit.p - s.c);
			return true;
		}
		t = (-b+sqrt(dis))/a;	
		if(t<T_MAX && t>T_MIN)
		{
			hit.t = t;
			hit.p = r.at(t);
			hit.n = normalize(hit.p - s.c);
			return true;
		}
	}
	return false;	
}

uniform Material mats[] = Material[](
	Material(LIGHT_BLUE,.0,-1),
	Material(ORANGE,1.0,-1),
	Material(GRASS_GREEN,.0,-1),
	Material(WHITE,1,1.2)
);

uniform Sphere sphs[] = Sphere[](
	Sphere(1.,vec3(0.,1.,3.),0),
	Sphere(1.,vec3(-2.,1.,3.),3),
	Sphere(1.,vec3(2.,1.,3.),1),
	Sphere(100.,vec3(0.,-100.,3.),2)
);

uniform Light lights[] = Light[](
	Light(WHITE,vec3(0,0,0),normalize(vec3(.2,-1,.2)))
);

void closestObject(Ray r,out Hit rec,out int closestIdx){
	closestIdx = -1;
	rec.t = INF;
	for(int i=0;i<sphs.length();i++){
		Hit hit;
		if(hitObj(sphs[i],r,hit)){
			if(hit.t<rec.t){
				closestIdx = i;
				rec = hit;
			}
		}
	}
}

// returns if it bounces
bool colorRay(Ray r,out vec3 att,out Ray bounce){
	int closestIdx = -1;
	Hit rec;
	closestObject(r,rec,closestIdx);

	if(closestIdx != -1){
		return mats[sphs[closestIdx].matIdx].scatter(r,rec,att,bounce);
	}
	else{
		float sky = (r.d.y + 1.)*.5;
		att = mix(WHITE,SKY_BLUE,sky);
		return false;
	}
}

#define SHADOW_ITER 2
#define SHADOW_DEPTH 2 
#define SHADOW_ATT .2

vec3 getLight(vec3 p,int lightIdx){

	vec3 col = WHITE;
	Ray r = Ray(p,-lights[lightIdx].dir);
	for(int i=0;i<SHADOW_ITER;i++){
		Ray bounce;
		vec3 att;
		if(colorRay(r,att,bounce)){
			col *= att; // might need a weight 
		}else{
			return lights[lightIdx].albedo*dot(-lights[lightIdx].dir,r.d);
		}
		r = bounce;
//		if(i==1){
//			debugColor = MAGENTA;
//		}
	}
	
	return col * SHADOW_ATT;
}

vec3 colorScene(Ray r){
	vec3 col = vec3(1.,1.,1.);
	for(int i=0;i<MAX_RSTEP;i++){
		vec3 rcol;
		Ray bounce;
		bool res = colorRay(r,rcol,bounce);
		r = bounce;
		col *= rcol;
		if(res == false)
			return col;
		if(i<SHADOW_DEPTH){
			col *= getLight(r.o,0);
		}
	}
	return col;
}

Ray getRay(vec2 uv, float rstate){
	Ray r = Ray(vec3(0.,0.,0.),vec3(uv,2));
	r.o = cam.pos;
	r.d = cam.rot * vec3(uv,1);
	vec3 off = vec3(cam.aperature * randInUnitCircle(rstate),0);
	vec3 c = r.at(cam.focusDist);
	r.o += cam.rot * off;
	r.d = normalize(c-r.o);
	return r;
}

// something is wrong with this
const vec2 PIXEL_SIZE = 2./vec2(gl_NumWorkGroups.xy);
vec3 colorSceneMSAA(vec2 uv){
	vec3 col = vec3(0,0,0);
	float state = floatConstruct(hash(gl_GlobalInvocationID.xy));
	for(int i=0;i<MSAA_SAMPLES;i++){
		Ray r = getRay(uv,state);
		col += colorScene(Ray(r.o,r.d + vec3(PIXEL_SIZE.x*(2*rand(state)-1),
											 PIXEL_SIZE.y*(2*rand(state)-1),
											 0)));
	}
	col /= float(MSAA_SAMPLES);
	return col;
}

vec3 gammaCorrect(vec3 col){
	return sqrt(col);
}



void main() {
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = (coord - .5 * gl_NumWorkGroups.xy)/float(.5*gl_NumWorkGroups.xy);

	vec4 value = vec4(1.,1.,1.,1.);
	value.xyz = gammaCorrect(colorSceneMSAA(uv));

	if(debugColor != vec3(0,0,0))
		value.xyz = debugColor;
	imageStore(imgOut,coord,value);
}